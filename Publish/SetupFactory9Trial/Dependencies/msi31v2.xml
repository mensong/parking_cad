<DependencyTemplate>
<Dependency>
<Name>Windows Installer 3.1 v2</Name>
<RuntimeTempFolder>msi31v2</RuntimeTempFolder>
<RevisionDate>Thursday, June 26, 2008</RevisionDate>
<Description>Dependency Module: Windows Installer 3.1 v2 

This dependency module will cause the Microsoft Windows Installer service 3.1 v2 (a.k.a. "Windows Installer 3.01") to be included in your setup. When run the setup will check for the existence of Windows Installer 3.1 v2 on the target system and then extract and install Windows Installer service if needed.

Windows Installer 3.1 Redistributable supports Windows 2000 with Service Pack 3 or later, Windows XP, Windows XP Service Pack 1, Windows XP Service Pack 2 and Windows Server 2003. Windows Server 2003 Service Pack 1 contains Windows Installer 3.1 and therefore can't be installed or upgraded by this redistributable.

Useful Links
------------

MSDN Online: Windows Installer Redistributables:
http://msdn2.microsoft.com/en-us/library/aa372856.aspx

MSDN Online: Error messages:
http://msdn2.microsoft.com/en-us/library/aa368542.aspx

MSDN Online: Windows Installer 3.1 v2 (3.1.4000.2435) is available:
http://support.microsoft.com/kb/893803

More Information
----------------

Installer command line switches:

AVAILABLE SWITCHES:
[/help] [/quiet] [/passive] [/norestart] [/forcerestart] [/warnrestart] [/promptrestart] [/overwriteoem] [/nobackup] [/forceappsclose] [/integrate:&lt;fullpath&gt;] [/log:&lt;fullpath&gt;]	
	/help			Displays this message
SETUP MODES
	/quiet			Quiet mode (no user interaction or display)
	/passive			Unattended mode (progress bar only)
RESTART OPTIONS
	/norestart   		Do not restart when installation is complete
	/forcerestart		Restart after installation
	/warnrestart[:&lt;seconds&gt;] 	Warn and restart automatically if required (default timeout 30 seconds)
	/promptrestart  		Prompt if restart is required
SPECIAL OPTIONS
	/overwriteoem		Overwrite OEM files without prompting
	/nobackup		Do not backup files needed for uninstall
	/forceappsclose		Force other programs to close when the computer shuts down
	/integrate:&lt;fullpath&gt;	Integrate this software update into &lt;fullpath&gt;
	/log:&lt;fullpath&gt;		Create log file at &lt;fullpath&gt;</Description>
<DetectScript>function isMSI_Installed()

	local strMSIVersion = MSI.GetMSIVersion();
	-- If installed - check the MSI service version meets the minimum requirement
	if(strMSIVersion)then
		if(String.CompareFileVersions(strMSIVersion,"3.1.4000.2435") &gt;= 0)then
			SetupData.WriteToLogFile("info\tWindows installer service 3.1v2 module: Minimum requirement detected on System\r\n",true);	
			return true;
		else
			SetupData.WriteToLogFile("Info\tWindows installer service 3.1v2 module: A lesser version of the Windows installer service was found on the users system. Windows installer service 3.1v2 will be installed.\r\n", true);
			return false;
		end
	end
	SetupData.WriteToLogFile("Info\tWindows installer service 3.1v2 module: No version of the Windows installer service was found. Windows installer service 3.1v2 will be installed.\r\n", true);
	return false;
end</DetectScript>
<DetectFunction>isMSI_Installed</DetectFunction>
<InstallScript>--[[
Only to be installed on 32 bit(x86) OSs:
Microsoft Windows 2000 Service Pack 3 (SP3) 
Microsoft Windows 2000 Service Pack 4 (SP4) 
Microsoft Windows XP  
Microsoft Windows XP Service Pack 1 (SP1) 
Microsoft Windows XP Service Pack 2 (SP2) 
Microsoft Windows Server 2003 
]]

-- Initialize variables
local strCmdArgs = "";
local sAppDataFolder = "";
local strErrorCode = "";
local bOSSupportsMSI31 = false;
local bRunInstallFile = true;
local bRunSuccess = false;
local strRuntimeSupportFolder = SessionVar.Expand("%TempLaunchFolder%\\msi31v2");
local strInstalledPath = strRuntimeSupportFolder.."\\WindowsInstaller-KB893803-v2-x86.exe";
local bVital = true;
local bSilentMode = false;
local bNoRestart = true;
local bMSILogEnabled = true;
local bShowUserPrompt = true;

local tblOSInfo = System.GetOSVersionInfo();
local strOSName = System.GetOSName();
local b64BitOs = System.Is64BitOS();
local strMSIVersion = MSI.GetMSIVersion();

if((tblOSInfo.PlatformId == "2") and (b64BitOs == false))then
	-- It is not a Win9x platform and is not a 64 bit Platform :
	local nMajorOSVersion = String.ToNumber(tblOSInfo.MajorVersion);
	local sServicePackName = tblOSInfo.CSDVersion;
	if(strOSName == "Windows 2000")then -- Windows 2000
		if ((sServicePackName == "") or (sServicePackName == "Service Pack 1") or (sServicePackName == "Service Pack 2")) then
			SetupData.WriteToLogFile("info\tWindows installer service 3.1v2 module: Windows installer 3.1 is not supported on Windows 2000 base, SP1 and SP2\r\n",true);
		else
			-- The OS is Windows 2000 SP3 or SP4 so the package can be installed
			bOSSupportsMSI31 = true;
		end
	elseif(strOSName == "Windows XP")then -- Windows XP
		--msi 3.1v2 or later will ship with SP3 when available mid 2008
		if (sServicePackName ~= "Service Pack 3") then
			bOSSupportsMSI31 = true;
		else
			SetupData.WriteToLogFile("info\tWindows installer service 3.1v2 module: Windows installer 3.1 is not supported on Windows XP SP3\r\n",true);
		end
	elseif(strOSName == "Windows Server 2003")then -- Windows Server 2003
		if (sServicePackName == "")then -- base install of Server 2003
			bOSSupportsMSI31 = true;
		else -- SP1 or greater
			SetupData.WriteToLogFile("info\tWindows installer service 3.1v2 module: Windows installer 3.1 is not supported on Windows 2003 SP1 and greater\r\n",true);
		end
	end
else -- Windows 9x or a 64Bit System
	if (tblOSInfo.PlatformId ~= "2") then --windows 9x-ME
		SetupData.WriteToLogFile("info\tWindows installer service 3.1v2 module: Windows installer 3.1 is not supported: on Windows 9x\r\n",true);
	else -- 64 bit OS
		SetupData.WriteToLogFile("info\tWindows installer service 3.1v2 module: Windows installer 3.1 is not supported: for 'redistribution' on 64Bit Systems\r\n",true);
	end
end

if(not bOSSupportsMSI31)then
	File.Delete(strInstalledPath);
	Folder.Delete(strRuntimeSupportFolder);
	-- Display message and Exit if Vital since the MSI 3.1 framework will not install on the detected OS Configuration
	if (bVital) then 
		local strMsg = [[This installer requires the Windows Installer 3.1 (or greater) engine to be installed
in order to complete. Your operating system does not support Windows Installer 3.1.
The setup will now abort.]];
		Dialog.Message("Error", strMsg, MB_OK, MB_ICONSTOP);
		Application.Exit(200);
	else
		Application.ExitScript();
	end
end

-- Check if the dialog should be displayed asking whether or not they want to install the module.
if(bShowUserPrompt)then
	local strMessage = [[Setup has detected that your Microsoft Windows Installer service run-time files are out of date.
Click OK to install this technology now or Cancel to abort the setup.]];
	local strDialogTitle = "Technology Required";
	local nDialogResult = Dialog.Message(strDialogTitle,strMessage,MB_OKCANCEL,MB_ICONEXCLAMATION);
	if(nDialogResult == IDOK)then
		-- The user chose to install the module.
		bRunInstallFile = true;
	else
		-- The user chose not to install the module.
		bRunInstallFile = false;
	end
end

if (bRunInstallFile) then

	if (bSilentMode) then
		strCmdArgs = strCmdArgs.."/quiet ";
	end
	
	if (bNoRestart) then
		strCmdArgs = strCmdArgs.."/norestart ";
	end
	
	if (bMSILogEnabled) then
		sAppDataFolder = Shell.GetFolder(SHF_APPLICATIONDATA);
		if sAppDataFolder ~= "" then
			strCmdArgs = strCmdArgs.."/log:\""..sAppDataFolder.."\\MSI3.1Logfile.log\"";
		end
	end
	
	
	SetupData.WriteToLogFile("info\tWindows installer service 3.1v2 module: Windows installer 3.1 redistributable is starting\r\n",true);
	local nReturnCode = File.Run(strInstalledPath, strCmdArgs, "", SW_SHOWNORMAL, true);
	-- return codes of 0, 1641, 3010 mean success. All other mean failure.
	if nReturnCode == 0 then
		bRunSuccess = true;
		strErrorCode = "ERROR_SUCCESS";
	elseif nReturnCode ==  13 then
		strErrorCode = "ERROR_INVALID_DATA";
	elseif nReturnCode ==  87 then
		strErrorCode = "ERROR_INVALID_PARAMETER";
	elseif nReturnCode ==  120 then
		strErrorCode = "ERROR_CALL_NOT_IMPLEMENTED";
	elseif nReturnCode ==  1259 then
		strErrorCode = "ERROR_APPHELP_BLOCK";
	elseif nReturnCode ==  1601 then
		strErrorCode = "ERROR_INSTALL_SERVICE_FAILURE";
	elseif nReturnCode ==  1602 then
		strErrorCode = "ERROR_INSTALL_USEREXIT";
	elseif nReturnCode ==  1603 then
		strErrorCode = "ERROR_INSTALL_FAILURE";
	elseif nReturnCode ==  1604 then
		strErrorCode = "ERROR_INSTALL_SUSPEND";
	elseif nReturnCode ==  1605 then
		strErrorCode = "ERROR_UNKNOWN_PRODUCT";
	elseif nReturnCode ==  1606 then
		strErrorCode = "ERROR_UNKNOWN_FEATURE";
	elseif nReturnCode ==  1607 then
		strErrorCode = "ERROR_UNKNOWN_COMPONENT";
	elseif nReturnCode ==  1608 then
		strErrorCode = "ERROR_UNKNOWN_PROPERTY";
	elseif nReturnCode ==  1609 then
		strErrorCode = "ERROR_INVALID_HANDLE_STATE";
	elseif nReturnCode ==  1610 then
		strErrorCode = "ERROR_BAD_CONFIGURATION";
	elseif nReturnCode ==  1611 then
		strErrorCode = "ERROR_INDEX_ABSENT";
	elseif nReturnCode ==  1612 then
		strErrorCode = "ERROR_INSTALL_SOURCE_ABSENT";
	elseif nReturnCode ==  1613 then
		strErrorCode = "ERROR_INSTALL_PACKAGE_VERSION";
	elseif nReturnCode ==  1614 then
		strErrorCode = "ERROR_PRODUCT_UNINSTALLED";
	elseif nReturnCode ==  1615 then
		strErrorCode = "ERROR_BAD_QUERY_SYNTAX";
	elseif nReturnCode ==  1616 then
		strErrorCode = "ERROR_INVALID_FIELD";
	elseif nReturnCode ==  1618 then
		strErrorCode = "ERROR_INSTALL_ALREADY_RUNNING";
	elseif nReturnCode ==  1619 then
		strErrorCode = "ERROR_INSTALL_PACKAGE_OPEN_FAILED";
	elseif nReturnCode ==  1620 then
		strErrorCode = "ERROR_INSTALL_PACKAGE_INVALID";
	elseif nReturnCode ==  1621 then
		strErrorCode = "ERROR_INSTALL_UI_FAILURE";
	elseif nReturnCode ==  1622 then
		strErrorCode = "ERROR_INSTALL_LOG_FAILURE";
	elseif nReturnCode ==  1623 then
		strErrorCode = "ERROR_INSTALL_LANGUAGE_UNSUPPORTED";
	elseif nReturnCode ==  1624 then
		strErrorCode = "ERROR_INSTALL_TRANSFORM_FAILURE";
	elseif nReturnCode ==  1625 then
		strErrorCode = "ERROR_INSTALL_PACKAGE_REJECTED";
	elseif nReturnCode ==  1626 then
		strErrorCode = "ERROR_FUNCTION_NOT_CALLED";
	elseif nReturnCode ==  1627 then
		strErrorCode = "ERROR_FUNCTION_FAILED";
	elseif nReturnCode ==  1628 then
		strErrorCode = "ERROR_INVALID_TABLE";
	elseif nReturnCode ==  1629 then
		strErrorCode = "ERROR_DATATYPE_MISMATCH";
	elseif nReturnCode ==  1630 then
		strErrorCode = "ERROR_UNSUPPORTED_TYPE";
	elseif nReturnCode ==  1631 then
		strErrorCode = "ERROR_CREATE_FAILED";
	elseif nReturnCode ==  1632 then
		strErrorCode = "ERROR_INSTALL_TEMP_UNWRITABLE";
	elseif nReturnCode ==  1633 then
		strErrorCode = "ERROR_INSTALL_PLATFORM_UNSUPPORTED";
	elseif nReturnCode ==  1634 then
		strErrorCode = "ERROR_INSTALL_NOTUSED";
	elseif nReturnCode ==  1635 then
		strErrorCode = "ERROR_PATCH_PACKAGE_OPEN_FAILED";
	elseif nReturnCode ==  1636 then
		strErrorCode = "ERROR_PATCH_PACKAGE_INVALID";
	elseif nReturnCode ==  1637 then
		strErrorCode = "ERROR_PATCH_PACKAGE_UNSUPPORTED";
	elseif nReturnCode ==  1638 then
		strErrorCode = "ERROR_PRODUCT_VERSION";
	elseif nReturnCode ==  1639 then
		strErrorCode = "ERROR_INVALID_COMMAND_LINE";
	elseif nReturnCode ==  1640 then
		strErrorCode = "ERROR_INSTALL_REMOTE_DISALLOWED";
	elseif nReturnCode ==  1641 then
		strErrorCode = "ERROR_SUCCESS_REBOOT_INITIATED";
		bRunSuccess = true;
	elseif nReturnCode ==  1642 then
		strErrorCode = "ERROR_PATCH_TARGET_NOT_FOUND";
	elseif nReturnCode ==  1643 then
		strErrorCode = "ERROR_PATCH_PACKAGE_REJECTED";
	elseif nReturnCode ==  1644 then
		strErrorCode = "ERROR_INSTALL_TRANSFORM_REJECTED";
	elseif nReturnCode ==  1645 then
		strErrorCode = "ERROR_INSTALL_REMOTE_PROHIBITED";
	elseif nReturnCode ==  1646 then
		strErrorCode = "ERROR_PATCH_REMOVAL_UNSUPPORTED";
	elseif nReturnCode ==  1647 then
		strErrorCode = "ERROR_UNKNOWN_PATCH";
	elseif nReturnCode ==  1648 then
		strErrorCode = "ERROR_PATCH_NO_SEQUENCE";
	elseif nReturnCode ==  1649 then
		strErrorCode = "ERROR_PATCH_REMOVAL_DISALLOWED";
	elseif nReturnCode ==  1650 then
		strErrorCode = "ERROR_INVALID_PATCH_XML";
	elseif nReturnCode ==  1651 then
		strErrorCode = "ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT";
	elseif nReturnCode ==  3010 then
		bRunSuccess = true;
		strErrorCode = "ERROR_SUCCESS_REBOOT_REQUIRED";
	end
	File.Delete(strInstalledPath);
	Folder.Delete(strRuntimeSupportFolder);
	--check if the redistributable was installed properly
	if (not bRunSuccess) then
		SetupData.WriteToLogFile("FAIL\tWindows installer service 3.1v2 module: Windows installer 3.1 failed with error: "..strErrorCode.."\r\n",true);
		if (bVital) then -- failed and critical - display message and Close Setup
			Dialog.Message("Error", "The MSI 3.1 failed to run".."\r\n"..strErrorCode,MB_OK,MB_ICONSTOP);
			Application.Exit(200);
		end	
	elseif (bRunSuccess) then
		SetupData.WriteToLogFile("Success\tWindows installer service 3.1v2 module: Windows installer 3.1 redistributable installed properly"..strErrorCode.."\r\n",true);
	end
else
	-- The user chose not to install the runtime so delete the run time installer file,
	-- remove the temp folder and then exit the setup.
	
	-- Output to the log that the user chose to abort the setup.
	SetupData.WriteToLogFile("Error\tWindows installer service 3.1v2 module: User chose to abort setup. Exiting setup.\r\n");
	
	File.Delete(strInstalledPath);
	Folder.Delete(strRuntimeSupportFolder);
	
	if bVital then
		Application.Exit(EXIT_REASON_USER_ABORTED);
	else
		Application.ExitScript();
	end
end</InstallScript>
<SupportFiles>
<File>#SUFDIR#\Dependencies\msi31v2\WindowsInstaller-KB893803-v2-x86.exe</File>
</SupportFiles>
</Dependency>
</DependencyTemplate>
