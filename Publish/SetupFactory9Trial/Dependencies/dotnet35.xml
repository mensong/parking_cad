<DependencyTemplate>
<Dependency>
<Name>.NET 3.5</Name>
<RuntimeTempFolder>dotnet35</RuntimeTempFolder>
<RevisionDate>Wednesday, October 20, 2010</RevisionDate>
<Description>Installs the Microsoft .NET 3.5 Framework onto the user's system. Includes the .NET installer in the setup executable.

Applications and controls written for the .NET Framework version 3.5 require the .NET Framework Redistributable Package version 3.5 to be installed on the computer where the application or control runs. The .NET Framework redistributable package is available as a stand-alone executable file, dotnetfx35.exe. When this dependency module is included in your setup, it detects and installs the .NET Framework redistributable.

This module is supported on both 32-bit (x86) and 64-bit (x64) architectures of the following operating systems:
Microsoft Windows XP Service Pack 2 (SP2)
Microsoft Windows Server 2003 Service Pack 1 (SP1)
Windows Vista
Windows Server 2008 

This dependency module requires that you supply a copy of the Microsoft .NET Framework redistributable file (dotnetfx35.exe). Download the file (dotnetfx35.exe) from the URL below into a new folder \Dependencies\dotnet35 within the Setup Factory program directory:

http://www.microsoft.com/downloads/details.aspx?FamilyId=333325FD-AE52-4E35-B531-508D977D32A6&amp;displaylang=en

Directly at:

http://download.microsoft.com/download/6/0/f/60fc5854-3cb8-4892-b6db-bd4f42510f28/dotnetfx35.exe

For more information about .NET 3.5, please see:

Microsoft .NET Framework 3.5 Readme:
http://download.microsoft.com/download/9/a/e/9ae0f6cc-7032-408e-9ca7-989f9e4af4ec/dotNetReadMe.htm

MSDN Article: Microsoft .NET Framework 3.5 Deployment Guide for Application Developers
http://msdn2.microsoft.com/en-us/library/cc160716.aspx</Description>
<DetectScript>function isDotNet_Installed()
	-- .Net 3.5 Reg Key
	local DotNet_Key = "SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v3.5";
	--Check to see if the registry key exists
	local DotNet_Registry = Registry.DoesKeyExist(HKEY_LOCAL_MACHINE, DotNet_Key);
		
	if (DotNet_Registry == false) then
		-- The registry key does not exist
		-- Run the .NET Installation script
		-- Output to the log file that .NET could not be found, so it will be installed.
		SetupData.WriteToLogFile("Info\t.NET 3.5 Module: No version of .NET 3.5 was found. .NET 3.5 will be installed.\r\n", true);
		return false;
	else -- The key does exist

		-- Get the .NET install success value from the registry
		local DotNet_Install_Success = Registry.GetValue(HKEY_LOCAL_MACHINE, DotNet_Key, "Install", true);

		if (DotNet_Install_Success == "1") then
			-- Check the version key.
			local DotNet_Install_Version = Registry.GetValue(HKEY_LOCAL_MACHINE, DotNet_Key, "Version", true);			
			
			-- Compare the returned value against the needed value
			Compare = String.CompareFileVersions(DotNet_Install_Version, "3.5.21022.08");
							
			if (Compare == 0 or Compare == 1) then
				-- .NET version 3.5 is installed already
				SetupData.WriteToLogFile("Info\t.NET 3.5 Module: .NET version 3.5 is installed already\r\n", true);
				return true;
			else 	
				SetupData.WriteToLogFile("Info\t.NET 3.5 Module: A lesser version of .NET 3.5 was found on the users system.\r\n", true);
				return false;
			end
		else
			-- The success value wasn't found
			-- Run the .NET Installation script
			-- Output to the log file that .NET could not be found, so it will be installed.
			SetupData.WriteToLogFile("Info\t.NET 3.5 Module: No version of .NET 3.5 was found. .NET 3.5 will be installed.\r\n", true);
			return false;
		end
	end
	return false;
end
</DetectScript>
<DetectFunction>isDotNet_Installed</DetectFunction>
<InstallScript>
-- Check to see if this is a valid operating system for .NET 3.5
function isValidDotNet35OS()
	SetupData.WriteToLogFile("Info\t.NET 3.5 Module: Entering compatible OS detection.\r\n",true);

	local tblOSInfo = System.GetOSVersionInfo();
	
	-- Check Windows XP
	if ((tblOSInfo.MajorVersion == "5") and (tblOSInfo.MinorVersion == "1")) then
		-- Check service pack:
		if tblOSInfo.ServicePackMajor &lt; 2 then
			SetupData.WriteToLogFile("Info\t.NET 3.5 Module: Windows XP SP2+ required.\r\n",true);
			return false;
		else
			-- Windows XP SP2+ acceptable
			return true;
		end
	end
	
	-- Check Windows Server 2003 / Windows XP Professional x64
	if ((tblOSInfo.MajorVersion == "5") and (tblOSInfo.MinorVersion == "2")) then
		-- Check service pack:
		if tblOSInfo.ServicePackMajor &lt; 1 then
			SetupData.WriteToLogFile("Info\t.NET 3.5 Module: Windows Server 2003 SP1+ / Windows XP Professional x64 SP1+ required.\r\n",true);
			return false;
		else
			-- Windows Server 2003 SP1+ acceptable
			return true;
		end
	end
	
	-- Check Windows Vista / Windows Server 2008
	if ((tblOSInfo.MajorVersion == "6") and (tblOSInfo.MinorVersion == "0")) then
		return true;
	end
		
	return false;
end



if (not isDotNet_Installed()) then
	-- Variables used in the installation actions:
	local strMessage = [[Setup has detected that your Microsoft .NET run-time files are out of date.
Click OK to install this technology now or Cancel to abort the setup.]];
	local strDialogTitle = "Technology Required";
	local bShowUserPrompt = true; -- set this to true to ask user whether to install the module
	local bRunInstallFile = true; -- The default of whether or not to run the setup
	local bRequirementFail = false;
	local tbRequirementFailStrings = {};
	local strAbortQuestion = [[

Due to this requirement failure, it is recommended that you abort the install.

Click OK to abort the setup, or Cancel to continue with the application install.]];
	local strRequirementString = [[.NET 3.5 cannot be installed due to the following requirements:

]];
	local strRuntimeSupportFolder = SessionVar.Expand("%TempLaunchFolder%\\dotnet35");
	local strExtractInstallerToPath = strRuntimeSupportFolder.."\\dotnetfx35.exe";
	local strMessageFail = "";
	local _NeedsReboot = false;
	local strCmdArgs = "";
	local bSilentMode = false; -- Should this be silent?;
	local bVital = true; -- Is .Net 3.5 vital?
	
	-- Output to the log that the .NET installation script has started.
	SetupData.WriteToLogFile("Success\t.NET 3.5 Module: Installation script started.\r\n", true);
	
	------------------------------------------------------------------------------------------------------------
	---- Requires Internet Explorer 6.0 SP1 or greater  (6.00.2800.1106)                                    ----
	------------------------------------------------------------------------------------------------------------	
	
	-- Read the version of Internet Explorer (if installed).
	strIEVersion = Registry.GetValue(HKEY_LOCAL_MACHINE, "Software\\Microsoft\\Internet Explorer", "Version", false);
	
	-- If Internet Explorer Version is less than 6.00.2800.1106 , or cannot be found,
	-- set the failure variable and failure string table.
	if ((String.CompareFileVersions(strIEVersion, "6.00.2800.1106")== -1) or (strIEVersion == "")) then
		bRequirementFail = true;
		strTemp = "- .NET 3.5 requires Internet Explorer version 6.0 SP1 or greater.";
		Table.Insert(tbRequirementFailStrings, Table.Count(tbRequirementFailStrings) + 1, strTemp);
	end
	
	------------------------------------------------------------------------------------------------------------
	---- Requires Admin permissions                                                                         ----
	------------------------------------------------------------------------------------------------------------
	
	-- Check if the user is logged in with administrative permissions.
	-- If the user doesn't have admin permissions, set the failure variable
	-- and failure string table.
	tbUserInfo = System.GetUserInfo();
	if (tbUserInfo ~= nil) then
		if (not tbUserInfo.IsAdmin) then
			bRequirementFail = true;
			strTemp ="- You do not have the required administrative permissions to install .NET 3.5.";
			Table.Insert(tbRequirementFailStrings, Table.Count(tbRequirementFailStrings) + 1, strTemp);
		end
	end
	
	------------------------------------------------------------------------------------------------------------
	---- Requires MSI 3.1                                       						----
	------------------------------------------------------------------------------------------------------------
	-- Get the operating system name.
	local strOSName = System.GetOSName();
	
	local strMSIVersion = MSI.GetMSIVersion();
	
	-- need MSI 3.1
	if (String.CompareFileVersions(strMSIVersion,"3.1.4000.2435") == -1) or (not strMSIVersion) then
		-- MSI 3.1 is not installed
		bRequirementFail = true;
		strTemp = "- The .NET 3.5 runtime module requires Windows Installer 3.1. Please install this technology then run the setup again.";
		Table.Insert(tbRequirementFailStrings, Table.Count(tbRequirementFailStrings) + 1, strTemp);
	end
	

	------------------------------------------------------------------------------------------------------------
	---- Operating System Check        
	--Windows Server 2003;  (SP1)
	--Windows XP            (SP2)  
	--Windows Vista
	--Windows Server 2008                                                 
	------------------------------------------------------------------------------------------------------------
	

	-- Check if OS is valid.
	if (not isValidDotNet35OS()) then
		bRequirementFail = true;
		--.NET 3.5 isn't supported on the OS that was detected.
		strTemp = "- .NET 3.5 cannot be installed on this operating system. Requires Windows XP SP2, Windows Server 2003 SP1, Windows XP Professional x64 SP1, Windows Server 2008 or Windows Vista.";
		Table.Insert(tbRequirementFailStrings, Table.Count(tbRequirementFailStrings) + 1, strTemp);
	end

	
	-- Check if the dialog should be displayed asking whether or not they want to install the module.
	if(bShowUserPrompt)then
		local nDialogResult = Dialog.Message(strDialogTitle,strMessage,MB_OKCANCEL,MB_ICONEXCLAMATION);
		if(nDialogResult == IDOK)then
			-- The user chose to install the module.
			bRunInstallFile = true;
		else
			-- The user chose not to install the module.
			bRunInstallFile = false;
		end
	end
	
	if (not bRequirementFail) then
		-- Check if the user wants to install the runtime.
		if(bRunInstallFile)then
			-- The following are command line options that can be used when launching the install file Dotnetfx3.exe.
			-- /q  - Suppresses all UI. An .INI file cannot be specified with this option.
			-- /quiet  - Same as /q.
			-- /qb - Displays minimal UI, showing only progress.
			-- /passive - Same as /qb.
			-- /uninstall - Uninstalls product.
			-- /remove - Same as /uninstall.
			-- /f - Repairs all .NET Framework 3.5 components that are installed.
			-- /nopatch -  Specifies that patches are not applied and bypasses patch checking.
			-- /norollback - Specifies that setup is not rolled back if a setup component fails.
			-- /norestart -  Specifies that the installer does not restart the computer after installation completes. The 							--redistributable installer returns ERROR_SUCCESS_REBOOT_REQUIRED (3010) if a reboot is required.
			--/? - Displays this list of options.


			if (bSilentMode) then
				-- Passing quite mode, and no restart.
				strCmdArgs = strCmdArgs.."/q /norestart ";
			else
				-- Passing no restart.
				strCmdArgs = strCmdArgs.."/norestart ";
			end

			-- Output to the log that the .NET installation is being launched.
			SetupData.WriteToLogFile("Info\t.NET 3.5 Module: .NET 3.5 installation file "..strExtractInstallerToPath.." is being launched.\r\n");
			local nResult = File.Run(strExtractInstallerToPath, strCmdArgs, "", SW_SHOWNORMAL, true);
				if (nResult == 3010) then
					-- .NET install indicated that it needs reboot to be complete
					-- Set Setup Factory's reboot variable so that the reboot is just
					-- performed at the end of the install.
					_NeedsReboot = true;
				elseif (nResult == 1602) then
					-- The user canceled the setup program.
					strMessageFail = [[You have cancelled the installation for .NET 3.5. It is not recommended that you continue with the setup.

Click OK to abort the setup, or Cancel to continue with the application install.]];
				elseif (nResult == 1603) then
					-- A fatal error occurred during installation.
					strMessageFail = [[A fatal error occurred during installation of the .NET 3.5 runtime. It is not recommended that you continue with the setup.

Click OK to abort the setup, or Cancel to continue with the application install.]];
				elseif (nResult == 1605) then
					-- This action is only valid for products that are currently installed.
					strMessageFail = [[Error during installation of the .NET 3.5 runtime. This action is valid only for products that are currently installed. It is not recommended that you continue with the setup.

Click OK to abort the setup, or Cancel to continue with the application install.]];
				elseif (nResult == 1636) then
					-- The patch package could not be opened or the patch was not applicable to the .NET Framework 3.5.
					strMessageFail = [[The patch package could not be opened or the patch was not applicable to the .NET Framework 3.5. It is not recommended that you continue with the setup.

Click OK to abort the setup, or Cancel to continue with the application install.]];
				elseif (nResult == 1639) then
					-- Invalid command line argument.
					strMessageFail = [[An invalid command line argument was passed to the .NET 3.5 installation. It is not recommended that you continue with the setup.

Click OK to abort the setup, or Cancel to continue with the application install.]];
				elseif (nResult == 1641) then
					-- The installer has initiated a restart. Will continue after rester
					_NeedsReboot = true;
				elseif (nResult == 1643) then
					-- The patch package is not permitted by system policy.
					strMessageFail = [[The .NET 3.5 patch package is not permitted by system policy. It is not recommended that you continue with the setup.

Click OK to abort the setup, or Cancel to continue with the application install.]];
				elseif (nResult == 0) then
					-- The .NET setup was successful, so do nothing.
				else
					-- The .NET setup program was not completed successfully.
					strMessageFail = [[An unknown error occurred during the installation of the .NET 3.5 runtime. It is not recommended that you continue with the setup.

Click OK to abort the setup, or Cancel to continue with the application install.]];
				end

				-- Check to see if an error message was generated.
				if (strMessageFail ~= "") then
					-- Display the error notification dialog.
					
					-- Output to the log .NET error message.
					SetupData.WriteToLogFile("Error\t.NET 3.5 Module: Dialog error shown- "..strMessageFail..".\r\n");
					
					if (bShowUserPrompt) then
						nDialogResult = Dialog.Message(".NET 3.5 Installation" ,strMessageFail,MB_OKCANCEL,MB_ICONEXCLAMATION);
						if (nDialogResult == IDOK) then
							bAbortInstall = true;
						end
					end
				end
		
			-- Delete the run time installer file and remove the temp folder
			File.Delete(strExtractInstallerToPath);
			Folder.Delete(strRuntimeSupportFolder);
			
			-- If the user chose to abort the install after the failure of .NET install, exit the setup.
			if (bAbortInstall) then
				-- Output to the log that the user chose to abort the setup after .NET failure.
				SetupData.WriteToLogFile("Error\t.NET 3.5 Module: User chose to abort setup after .NET failure. Exiting setup.\r\n");
				Application.Exit(EXIT_REASON_USER_ABORTED);	
			end
			
			
			
		else
			-- The user chose not to install the runtime so delete the run time installer file,
			-- remove the temp folder and then exit the setup.
			
			-- Output to the log that the user chose to abort the setup.
			SetupData.WriteToLogFile("Error\t.NET 3.5 Module: User chose to abort setup. Exiting setup.\r\n");
			
			File.Delete(strExtractInstallerToPath);
			Folder.Delete(strRuntimeSupportFolder);
			if bVital then
				Application.Exit(EXIT_REASON_USER_ABORTED);
			else
				Application.ExitScript();
			end
		end
	else
	-- A requirement failed
	
		-- If the user didn't cancel...
		if (bRunInstallFile) then 
			-- One or more of the requirements failed. Notify the user and ask if they wish
			-- to abort the installation.
			strFullErrorString = Table.Concat(tbRequirementFailStrings, "\r\n", 1, TABLE_ALL);
			nDialogResult = Dialog.Message("Notice", strRequirementString..strFullErrorString..strAbortQuestion, MB_OKCANCEL, MB_ICONINFORMATION, MB_DEFBUTTON1);
			
			-- Output the requirement failure string to the log.
			SetupData.WriteToLogFile("Error\t.NET 3.5 Module: Requirement failure dialog: "..strFullErrorString.."\r\n");
			
			-- Delete the runtime installer file and remove the temp folder
			File.Delete(strExtractInstallerToPath);
			Folder.Delete(strRuntimeSupportFolder);
			
			-- The user chose to abort the install due to the requirement failure of .NET.
			if (nDialogResult == IDOK) then
			
				-- Output to the log that the user chose to abort the install due to requirement failure.
				SetupData.WriteToLogFile("Error\t.NET 3.5 Module: User aborted setup due to requirement failure. Exiting setup.\r\n");
			
				-- Abort the install.
				Application.Exit(EXIT_REASON_USER_ABORTED);
			end
		else
			-- The user chose not to install the runtime so delete the run time installer file,
			-- remove the temp folder and then exit the setup.
			
			-- Output to the log that the user chose to abort the setup.
			SetupData.WriteToLogFile("Error\t.NET 3.5 Module: User chose to abort setup. Exiting setup.\r\n");
			
			File.Delete(strExtractInstallerToPath);
			Folder.Delete(strRuntimeSupportFolder);
			
			if bVital then
				Application.Exit(EXIT_REASON_USER_ABORTED);
			else
				Application.ExitScript();
			end
		
		end
	end
	
	-- If a reboot was needed by .NET, notify the user that they must reboot
	-- before continuing with the install
	
	-- NOTE: If you would always like to force the user to reboot, comment out the "if (_NeedsReboot) then" condition below.
	
	local strRebootMessage = [[A reboot is required to continue with the installation. After rebooting, re-run the installation.

Click OK to reboot now, or Cancel to reboot later.]];
	if (_NeedsReboot) then
		nDialogResult = Dialog.Message("Notice", strRebootMessage, MB_OKCANCEL, MB_ICONINFORMATION, MB_DEFBUTTON1);
		
		-- Output to the log that a reboot is required by the .NET setup.
		SetupData.WriteToLogFile("Info\t.NET 3.5 Module: .NET 3.5 detected that a reboot is required.\r\n");
		-- Check if the uer wanted to reboot now.
		if (nDialogResult == IDOK) then
		
			-- NOTE:  If you would like the install to relaunch itself after the reboot,
			-- uncomment the following block of code.
			-- Re-run the installation after the reboot.
			
			-- File.RunOnReboot(_SourceFilename, "");
		
			-- Output to the log that a reboot will be performed.
			SetupData.WriteToLogFile("Info\t.NET 3.5 Module: A reboot will be performed.\r\n");
			-- Reboot the user's system.
			System.Reboot();
		else
			-- Output to the log that the user chose to reboot later and abort the setup.
			SetupData.WriteToLogFile("Info\t.NET 3.5 Module: User chose to reboot later. Exiting setup.\r\n");
			-- Abort the install.
			Application.Exit(EXIT_REASON_USER_ABORTED);
		end
	end
	-- Output to the log that the installation script has finished.
	SetupData.WriteToLogFile("Success\t.NET 3.5 Module: Installation script finished.\r\n");
end
</InstallScript>
<SupportFiles>
<File>#SUFDIR#\Dependencies\dotnet35\dotnetfx35.exe</File>
</SupportFiles>
</Dependency>
</DependencyTemplate>
