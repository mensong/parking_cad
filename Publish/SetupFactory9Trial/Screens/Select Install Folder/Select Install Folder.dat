<SUF7ScreenData>
<Name>Select Install Folder</Name>
<Description>Prompts the user to select a folder where the files will be installed.

(The selected path is stored in the %AppFolder% session variable.)</Description>
<GalleryVisiblity>15</GalleryVisiblity>
<Screen>
<Type>110</Type>
<Name>Select Install Folder</Name>
<BannerStyle>2</BannerStyle>
<TemplateName>Select Install Folder</TemplateName>
<OverrideProjTheme>0</OverrideProjTheme>
<StyleData>
<CstClrs>0</CstClrs>
<TBBG format="hex">ffffff</TBBG>
<BDYBG format="hex">ece9d8</BDYBG>
<FTBG format="hex">ece9d8</FTBG>
<TBTXT format="hex">000000</TBTXT>
<BDYTXT format="hex">000000</BDYTXT>
<CBG format="hex">ffffff</CBG>
<C3DFACE format="hex">ece9d8</C3DFACE>
<C3DHLT format="hex">ece9d8</C3DHLT>
<C3DLIT format="hex">ffffff</C3DLIT>
<C3DSH format="hex">aca899</C3DSH>
<CBTNTXT format="hex">000000</CBTNTXT>
<CTEXT format="hex">000000</CTEXT>
<CDISTXT format="hex">aca899</CDISTXT>
<CPRGRS format="hex">316ac5</CPRGRS>
<C3DSHDK format="hex">716f64</C3DSHDK>
<TBIMG>Default_Top_Banner.jpg</TBIMG>
<SBIMG>Default_Side_Banner.jpg</SBIMG>
<BDIMG/>
<BDFILL>0</BDFILL>
<HDSEP>1</HDSEP>
<FTSEP>1</FTSEP>
<CstFnts>0</CstFnts>
<Fonts>
<FontData>
<FontName>Arial</FontName>
<CharacterSet>0</CharacterSet>
<Height>-13</Height>
<Weight>700</Weight>
<Italic>0</Italic>
<Underline>0</Underline>
<StrikeOut>0</StrikeOut>
<AntiAlias>1</AntiAlias>
</FontData>
<FontData>
<FontName>Arial</FontName>
<CharacterSet>0</CharacterSet>
<Height>-13</Height>
<Weight>700</Weight>
<Italic>0</Italic>
<Underline>0</Underline>
<StrikeOut>0</StrikeOut>
<AntiAlias>1</AntiAlias>
</FontData>
<FontData>
<FontName>Arial</FontName>
<CharacterSet>0</CharacterSet>
<Height>-24</Height>
<Weight>700</Weight>
<Italic>0</Italic>
<Underline>0</Underline>
<StrikeOut>0</StrikeOut>
<AntiAlias>1</AntiAlias>
</FontData>
<FontData>
<FontName>Arial</FontName>
<CharacterSet>0</CharacterSet>
<Height>-13</Height>
<Weight>400</Weight>
<Italic>0</Italic>
<Underline>0</Underline>
<StrikeOut>0</StrikeOut>
<AntiAlias>1</AntiAlias>
</FontData>
<FontData>
<FontName>Arial</FontName>
<CharacterSet>0</CharacterSet>
<Height>-13</Height>
<Weight>400</Weight>
<Italic>0</Italic>
<Underline>0</Underline>
<StrikeOut>0</StrikeOut>
<AntiAlias>1</AntiAlias>
</FontData>
</Fonts>
<CAOff>
<TP>0</TP>
<L>15</L>
<T>15</T>
<R>15</R>
<B>15</B>
</CAOff>
<CAOff>
<TP>1</TP>
<L>15</L>
<T>15</T>
<R>15</R>
<B>15</B>
</CAOff>
<CAOff>
<TP>2</TP>
<L>15</L>
<T>15</T>
<R>15</R>
<B>15</B>
</CAOff>
</StyleData>
<Variable>%AppFolder%</Variable>
<Events>
<Event>
<Name>On Preload</Name>
<Args/>
<Script>-- These actions are performed before the screen is shown.

-- calculate the amount of space required for the installation
_SpaceRequired = SetupData.CalculateRequiredSpace();

-- format it as a string with an appropriate unit of measurement (e.g. "0 bytes")
local strSpaceRequired = String.GetFormattedSize(_SpaceRequired);

-- store the string in a session variable so it can be used in the screen text
SessionVar.Set("%SpaceRequired%", strSpaceRequired);

-- from _SUF70_Global_Functions.lua:
-- update the 'Space required:' message (expands any session variables in it)
g_UpdateStaticTextCtrl(CTRL_STATICTEXT_SPACEREQUIRED, "IDS_CTRL_STATICTEXT_SPACEREQUIRED");
</Script>
</Event>
<Event>
<Name>On Back</Name>
<Args/>
<Script>-- These actions are performed when the Back button is clicked.

-- go back to the previous screen
Screen.Back();
</Script>
</Event>
<Event>
<Name>On Next</Name>
<Args/>
<Script>-- These actions are performed when the Next button is clicked.

-- from _SUF70_Global_Functions.lua:
-- make sure the install folder path is formatted properly (i.e. is a valid UNC or DOS path string)
if(g_IsValidPath(strInstallFolderPath)) then

	-- if there's enough space on the selected drive, proceed to the next screen
	if(_SpaceAvailable &gt;= _SpaceRequired) then
		-- there's enough space on the drive...so
		-- proceed to the next screen
		Screen.Next();
	else
		-- there isn't enough space on the drive...
		
		-- from _SUF70_Global_Functions.lua:
		-- ask the user if they want to continue anyway
		if g_ConfirmFreeSpaceOverride() then
			-- user said to install anyway...so
			-- advance to the next screen
			Screen.Next();
		end
	end
else
	-- the install folder path isn't valid...
	
	local strTitle = SetupData.GetLocalizedString("MSG_INVALID_ENTRY");
	local strPrompt;

	-- from _SUF70_Global_Functions.lua:
	-- check whether the install folder path contains only valid path characters
	if(g_ContainsValidPathChars(strInstallFolderPath)) then
		-- the string is just formatted wrong
		strPrompt = SetupData.GetLocalizedString("ERR_INVALID_PATH");
	else
		-- the string contains invalid characters
		strPrompt = SetupData.GetLocalizedString("ERR_INVALID_CHARACTERS") .. "\r\n/ * ? \" &lt; &gt; |";		
	end

	-- tell the user to smarten up :)
	Dialog.Message(strTitle, strPrompt, MB_OK, MB_ICONEXCLAMATION);
end
</Script>
</Event>
<Event>
<Name>On Cancel</Name>
<Args/>
<Script>-- These actions are performed when the Cancel button is clicked.

-- from _SUF70_Global_Functions.lua:
-- ask user if they're sure they want to exit
if g_ConfirmSetupAbort() then
	Application.Exit(EXIT_REASON_USER_ABORTED);
end
</Script>
</Event>
<Event>
<Name>On Help</Name>
<Args/>
<Script>-- These actions are performed when the Help button is clicked.
</Script>
</Event>
<Event>
<Name>On Ctrl Message</Name>
<Args>number e_CtrlID, number e_MsgID, table e_Details</Args>
<Script>-- These actions are triggered by the controls on the screen.

if(e_CtrlID == CTRL_BUTTON_BROWSE) then
	-- the control message is from the browse button...

	-- if it's a click message, show the browse dialog 
	-- and update the install folder
	if (e_MsgID == MSGID_CLICKED) then

		-- get the text from the label above the install folder field
		-- (this will be used as the prompt on the Browse dialog)
		local strPrompt = Screen.GetLocalizedString("IDS_CTRL_STATICTEXT_LABEL_01");
		strPrompt = SessionVar.Expand(strPrompt);
		
		-- from _SUF70_Global_Functions.lua:
		-- display a folder browse dialog to change the path in the install folder field
		g_EditFieldFolderBrowse(CTRL_EDIT_FOLDER, strPrompt);
	end
end


if(e_CtrlID == CTRL_EDIT_FOLDER) then
	-- the control message is from the install folder field...

	-- if it's an OnChanged message (i.e. the installation path has changed)
	-- recalculate the space available on the selected drive
	if (e_MsgID == MSGID_ONCHANGED) then

		strInstallFolderPath = e_Details.Text;
		
		-- from _SUF70_Global_Functions.lua:
		-- calculate the amount of disk space available on the selected drive
		_SpaceAvailable = g_GetFreeSpaceInBytes(strInstallFolderPath);

		-- set %SpaceAvailable% to a string with an appropriate unit of measurement (e.g. "0 bytes")
		SessionVar.Set("%SpaceAvailable%", String.GetFormattedSize(_SpaceAvailable) );

		-- from _SUF70_Global_Functions.lua:
		-- update the 'Space available on selected drive:' message (expands any session variables in it)
		g_UpdateStaticTextCtrl(CTRL_STATICTEXT_SPACEAVAILABLE, "IDS_CTRL_STATICTEXT_SPACEAVAILABLE");
	end
end
</Script>
</Event>
</Events>
<Controls>
<Control>
<Type>1</Type>
<ID>103</ID>
<Visible>0</Visible>
<Enabled>0</Enabled>
<TabOrder>75</TabOrder>
<FTButton>1</FTButton>
</Control>
<Control>
<Type>1</Type>
<ID>101</ID>
<Visible>1</Visible>
<Enabled>1</Enabled>
<TabOrder>76</TabOrder>
<FTButton>1</FTButton>
</Control>
<Control>
<Type>1</Type>
<ID>100</ID>
<Visible>1</Visible>
<Enabled>1</Enabled>
<TabOrder>-10</TabOrder>
<FTButton>1</FTButton>
</Control>
<Control>
<Type>1</Type>
<ID>102</ID>
<Visible>1</Visible>
<Enabled>1</Enabled>
<TabOrder>-9</TabOrder>
<FTButton>1</FTButton>
</Control>
<Control>
<Type>2</Type>
<ID>203</ID>
<Visible>1</Visible>
<Enabled>1</Enabled>
<TabOrder>1</TabOrder>
<IsHeading>0</IsHeading>
</Control>
<Control>
<Type>2</Type>
<ID>211</ID>
<Visible>1</Visible>
<Enabled>1</Enabled>
<TabOrder>2</TabOrder>
<IsHeading>0</IsHeading>
</Control>
<Control>
<Type>6</Type>
<ID>801</ID>
<Visible>1</Visible>
<Enabled>1</Enabled>
<TabOrder>3</TabOrder>
<TextAlign>0</TextAlign>
<VertScroll>0</VertScroll>
<HorizScroll>0</HorizScroll>
<RTLReadingOrder>0</RTLReadingOrder>
<Style>0</Style>
<Mode>0</Mode>
<MaskReturnMode>1</MaskReturnMode>
<ReadOnly>0</ReadOnly>
<StartNewRow>1</StartNewRow>
<SizeColumns>4</SizeColumns>
<Variable>%AppFolder%</Variable>
</Control>
<Control>
<Type>1</Type>
<ID>110</ID>
<Visible>1</Visible>
<Enabled>1</Enabled>
<TabOrder>4</TabOrder>
<FTButton>0</FTButton>
</Control>
<Control>
<Type>2</Type>
<ID>208</ID>
<Visible>1</Visible>
<Enabled>1</Enabled>
<TabOrder>5</TabOrder>
<IsHeading>0</IsHeading>
</Control>
<Control>
<Type>2</Type>
<ID>207</ID>
<Visible>1</Visible>
<Enabled>1</Enabled>
<TabOrder>6</TabOrder>
<IsHeading>0</IsHeading>
</Control>
</Controls>
</Screen>
</SUF7ScreenData>
